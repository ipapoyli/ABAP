***************************************************************************************
*Defining an Internal Table Based on the SQL Query

SELECT monster_name monster_number sanity
           FROM zt_monsters
           WHERE monster_name = 'FRED'
           INTO TABLE DATA(lt_monsters).
           
***************************************************************************************
*Fill Internal Table

DATA: lt_monsters TYPE STANDARD TABLE OF ztvc_monsters.

lt_monsters = VALUE#(
           ( monster_name = 'FRED'   monster_number = 1 )
           ( monster_name = 'HUBERT' monster_number = 2 ) ).     

***************************************************************************************
* Filling Internal Tables from Other Tables

DATA( lt_neurotic_monsters) = VALUE lt_neurotic_monsters(
           FOR ls_monsters IN lt_all_monsters WHERE (sanity < 20 )
                      monster_name = ls_monsters-monster_name
                      monster_number = ls_monsters-monster_number ) ).


***************************************************************************************
*Reading Everything from One Table during an Inner Join        

SELECT zt_monsters~*
           zt_hats~bar_code
           FROM zt_monsters
           INNER JOIN zt_hats
           ON zt_monsters~hat_size = zt_hats~hat_size
           WHERE monster_name = 'FRED'
           INTO DATA(lt_monsters).

***************************************************************************************
* Joining Two Tables in Ways Not Possible Before

INNER JOIN zt_monster_pets
ON zt_monster_pets~owner EQ zt_monsters~monster_number
AND zt_monster_pets~type LIKE 'GIGANTIC%'
AND zt_monster_pets~species IN ('SHARK','CROCODILE','DINOSAUR')

***************************************************************************************

CONSTANTS: lc_scary1 TYPE STRING VALUE 'SLIGHTLY SCARY',
           lc_scary2 TYPE STRING VALUE 'REALLY SCARY',
           lc_scary3 TYPE STRING VALUE 'NORMAL'.
           
SELECT monster_name, monster_number
  CASE
    WHEN sanity <= 10 AND strength >= 75 THEN @lc_scary2
    WHEN sanity <= 25 AND strength >= 50 THEN @lc_scary1
    ELSE @lc_scary3
  END AS scariness_string
FROM zt_monsters
WHERE monster_number = @ld_monster_number
INTO CORRESPONDING FIELDS OF @lt_monsters.  "LAST STATEMENT 

***************************************************************************************
"Before
DATA: ld_converted_strength TYPE fltp,
      ld_converted_sanity TYPE fltp.
      
SELECT monster_name monster_number strength sanity
  FROM zt_monsters
  INTO CORRESPONDING FIELDS OF lt_monsters.
  
LOOP AT lt_monsters ASSIGNING <ls_monsters>.
    ld_converted_strength = <ls_monsters>-strength.
    ld_converted_sanity = <ls_monsters>-sanity.
    <ls_monsters>-scary_ratio =
            ld_converted_strength / ld_converted_sanity.
ENDLOOP.


Listing 2.3 Operations Inside SQL Statements: Before
However, as of ABAP 7.4, it’s now possible to perform these operations within
the SQL query, as shown in Listing 2.4.

SELECT monster_name, monster_number
  CAST( strength AS fltp ) / CAST( sanity AS fltp )
    AS scary_ratio
  FROM zt_monsters
  WHERE monster_number = @ld_monster_number
  INTO CORRESPONDING FIELDS OF @lt_monsters.
  
  
  ***************************************************************************************
  
SELECT zt_monsters~*
       zt_hats~bar_code
  FROM zt_monsters
  INNER JOIN zt_hats
      ON zt_monsters~hat_size = zt_hats~hat_size
  WHERE monster_name = 'FRED'
  INTO DATA(lt_monsters).  " LAST STATEMENT 
  
  
***************************************************************************************    

DO LINES( lt_monsters[] ) TIMES.

ENDDO.

***************************************************************************************
*Building Up a String Using Pipes

CONCATENATE ‘Monster Number’ LD_NUMBER INTO LD_HELPER SEPARATED BY SPACE.
CONCATENATE LD_HELPER LD_STATUS INTO LD_RESULT
SEPARATED BY ‘ / ‘.

LD_RESULT = |Monster Number { ld_number } / { ld_status }|.

***************************************************************************************
*Removing Leading Zeroes via a Formatting Option

ld_message = |{ ld_delivery ALPHA = OUT }|.
MESSAGE ld_message TYPE ‘I’.
SELECT *
  FROM LIKP
  INTO CORRESPONDING FIELDS OF ls_delivery_header
  WHERE vbeln = ld_delivery_number.

***************************************************************************************
*the IF/THEN and CASE constructs you know and love keep on getting easier.
*No Helper Variable

IF STRLEN( LD_STRING ) > 10 THEN….

***************************************************************************************
*The SWITCH Statement as a Replacement for CASE
*Filling in a Variable Using a SWITCH Statement

DATA(L_DAY) = SWITCH char10( l_indicator
        when 1 THEN 'Monday'(326)
        when 2 THEN 'Tuesday'(327)
        when 3 THEN 'Wednesday'(328)
        when 4 THEN 'Thursday'(329)
        when 5 THEN 'Friday'(330).
        when 6 THEN 'Saturday'(331)
        when 7 THEN 'Sunday'(332)
      ELSE THROW zcx_day_problem( ) ).

***************************************************************************************
*The COND Statement as a Replacement for IF/ELSE
*Using the COND Constructor Operator

cs_monster_header-sanity_description =
  COND text30(
    WHEN cs_monster_header-sanity = 5  AND .... THEN 'VERY SANE'
    WHEN cs_monster_header-sanity = 4 THEN 'SANE'.
    WHEN cs_monster_header-sanity = 3 THEN 'SLIGHTLY MAD'.
    WHEN cs_monster_header-sanity = 2 THEN 'VERY MAD'.
    WHEN cs_monster_header-sanity = 1 THEN 'BONKERS'.
    ELSE.
        cs_monster_header-sanity_description = 'RENAMES SAP PRODUCTS'.
    ENDIF.


***************************************************************************************
*Moving One Table to Another in 7.4 

gt_green_monsters = CORRESPONDING #(
                        gt_blue_monsters
                          MAPPING people_scared = most_peasants_scared
                            EXCEPT evilness ).

***************************************************************************************
*Reading Into a Work Area and Looping Through a Table

READ TABLE lt_monsters WITH KEY monster_number = ld_monster_
number INTO DATA(ls_monsters).
LOOP AT lt_monsters INTO DATA(ls_monsters).

*Field Symbols for Work Area
READ TABLE lt_monsters WITH KEY monster_number = ld_monster_
number ASSIGNING FIELD-SYMBOL(<ls_monsters>).
LOOP AT lt_monsters ASSIGNING FIELD-SYMBOL(<ls_monsters>).

***************************************************************************************
SELECT SINGLE f1 AS my_f1,
              F2 AS abc  
         FROM dbtab
         INTO DATA(ls_structure)
        WHERE …

***************************************************************************************
If a table line is not found, the exception CX_SY_ITAB_LINE_NOT_FOUND is raised. No sy-subrc.
wa = itab[ idx ].
wa = itab[ KEY key INDEX idx ].
wa = itab[ col1 = … col2 = … ].
wa = itab[ KEY key col1 = … col2 = … ].
***************************************************************************************
IF line_exists( itab[ … ] ).
…
ENDIF.
***************************************************************************************
****
TYPES:
  BEGIN OF ty_line,
    col1 TYPE i,
    col2 TYPE i,
    col3 TYPE i,
  END OF ty_line,
  ty_tab TYPE STANDARD TABLE OF ty_line WITH EMPTY KEY.
DATA(gt_itab) = VALUE ty_tab( FOR j = 11 THEN j + 10 UNTIL j > 40
                            ( col1 = j col2 = j + 1 col3 = j + 2  ) ).

***************************************************************************************
Count lines of table that meet a condition (field F1 contains “XYZ”).
DATA: lv_lines TYPE i.
LOOP AT gt_itab INTO ls_itab where F1 = ‘XYZ’.
  lv_lines = lv_lines + 1.
ENDLOOP.

DATA(lv_lines) = REDUCE i( INIT x = 0 FOR wa IN gt_itab
                    WHERE( F1 = ‘XYZ’ ) NEXT x = x + 1 ).

***************************************************************************************
DATA(idx) = line_index( itab[ … ] ).

***************************************************************************************

CLEAR ls_line2.
MOVE-CORRESPONDING ls_line1        or     ls_line2 = CORRESPONDING #( ls_line1 ).
                TO ls_line2.

MOVE-CORRESPONDING ls_line1       or       ls_line2 = CORRESPONDING #( BASE ( ls_line2 ) ls_line1 ).
                TO ls_line2.

This creates a third and new structure (ls_line3) which is based on ls_line2 but overwritten by matching columns of ls_line1.
DATA(ls_line3) = CORRESPONDING line2   ( BASE ( ls_line2 ) ls_line1 ).

***************************************************************************************
DATA(gt_citys) = VALUE ty_citys( FOR ls_ship IN gt_ships ( ls_ship–city ) ).

DATA(gt_citys) = VALUE ty_citys( FOR ls_ship IN gt_ships WHERE ( route = ‘R0001’ ) ( ls_ship–city ) ).

DATA(gt_itab) = VALUE ty_tab( FOR j = 11 THEN j + 10 UNTIL j > 40 ( col1 = j col2 = j + 1 col3 = j + 2  ) ).

DATA(lv_lines) = REDUCE i( INIT x = 0 FOR wa IN gt_itab WHERE( F1 = ‘XYZ’ ) NEXT x = x + 1 ).

DATA(lv_sum) = REDUCE i( INIT x = 0 FOR wa IN itab NEXT x = x + wa ).

***************************************************************************************
***************************************************************************************
***************************************************************************************
***************************************************************************************
***************************************************************************************
***************************************************************************************
***************************************************************************************


    
